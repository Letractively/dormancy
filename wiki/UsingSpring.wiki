#summary Using Spring for wiring the service layer together.

= Getting started with Spring =

Dormancy provides great integration with Spring.
Another huge benefit is that Spring can initialize all `EntityPersister`s as well as a `SessionFactory`.

To make this more clearly, here is an example of how Spring can be used to serialize a custom class:

== Configuration ==

Spring scans for `EntityPersister`s in the classpath and registers them for the appropriate entity types:

{{{#!highlight xml
<ctx:component-scan base-package="org.acme" use-default-filters="false">
	<ctx:include-filter type="assignable" expression="at.schauer.gregor.dormancy.persister.EntityPersister"/>
</ctx:component-scan>
}}}

Next, a `Dormancy` instance has to be configured.

{{{#!highlight xml
<bean class="at.schauer.gregor.dormancy.Dormancy"/>
}}}

Several properties can also be set declarativly if necessary.

The following listing outlines a alternative configuration:

{{{#!highlight xml
<bean class="at.schauer.gregor.dormancy.Dormancy">
	<property name="config">
		<bean class="at.schauer.gregor.dormancy.EntityPersisterConfiguration">
			<!-- Advice Dormancy to ignore the version attribute -->
			<property name="versionChecking" value="false"/>
		</bean>
	</property>
	<!-- By default, the default EntityPersisters are registered allowing traversal of collections and maps -->
	<property name="registerDefaultEntityPersisters" value="false"/>
	<!-- Setting the SessionFactory is optional i.e., in case of multiple SessionFactories exist -->
	<property name="sessionFactory" ref="sessionFactory"/>
</bean>
}}}

Furthermore, the initial entity persister mapping can be defined by declaring a map with the object type as the key and the `EntityPersister` as the value.

{{{#!highlight xml
<bean class="at.schauer.gregor.dormancy.Dormancy">
	<property name="persisterMap">
		<map>
			<entry key="org.acme.model.Customer">
				<bean class="org.acme.persister.CustomerPersister"/>
			</entry>
		</map>
	</property>
</bean>
}}}
